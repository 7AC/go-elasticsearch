// generated by github.com/elastic/go-elasticsearch/cmd/generator; DO NOT EDIT

package {{.PackageName}}

import (
	"fmt"
	"net/http"

	"github.com/elastic/go-elasticsearch/transport"
	"github.com/elastic/go-elasticsearch/util"
)

// {{.MethodName}}{{.Spec.Documentation}}{{range .RequiredURLParts}}
//
// {{.Name}}: {{.Description}}{{end}}{{range .RequiredURLParams}}
//
// {{.Name}}: {{.Description}}{{end}}
//
// options: optional parameters. Supports the following functional options: {{range .OptionalURLParts}}{{.OptionName}}, {{end}}{{range .OptionalURLParams}}{{.OptionName}}, {{end}}see the Option type in this package for more info.
func ({{.ReceiverName}} *{{.TypeName}}) {{.MethodName}}({{range .RequiredURLParts}}{{.Name}} {{.Type}}, {{end}}{{range .RequiredURLParams}}{{.Name}} {{.Type}}, {{end}}options ...Option) (*{{.MethodName}}Response, error) {
	req := {{.ReceiverName}}.transport.NewRequest("{{.HTTPMethod}}")
	methodOptions := supportedOptions["{{.MethodName}}"]
	for _, option := range options{
		if _, ok := methodOptions[option.name]; !ok {
			return nil, fmt.Errorf("unsupported option: %s", option.name)
		}
		option.apply(req)
	}
	resp, err := {{.ReceiverName}}.transport.Do(req)
	return &{{.MethodName}}Response{resp}, err
}

// {{.MethodName}}Response is the response for {{.MethodName}}.
type {{.MethodName}}Response struct {
	Response *http.Response
	// TODO: fill in structured response
}

// DecodeBody decodes the JSON body of the HTTP response.
func (r *{{.MethodName}}Response) DecodeBody() (util.MapStr, error) {
	return transport.DecodeResponseBody(r.Response)
}
