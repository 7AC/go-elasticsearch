// generated by github.com/elastic/go-elasticsearch/cmd/generator; DO NOT EDIT

package {{.PackageName}}

import (
	"fmt"
	"net/http"

	"github.com/elastic/go-elasticsearch/transport"
	"github.com/elastic/go-elasticsearch/util"
)

// {{.Name}}Option is a non-required {{.Name}} option that gets applied to an HTTP request.
type {{.Name}}Option func(r *transport.Request)

{{range .Options}}{{if eq .SpecType "enum"}}// {{.Type}} - {{.Description}}
type {{.Type}} int
const (
	{{range .EnumValues}}// {{.Name}} can be used to set {{.Type}} to "{{.SpecName}}"
	{{.Name}} = iota
{{end}})

{{end}}{{.OptionString}}
{{end}}// {{.Name}}{{.Spec.Documentation}}{{range .RequiredURLParts}}
//
// {{.Name}}: {{.Description}}{{end}}{{range .RequiredURLParams}}
//
// {{.Name}}: {{.Description}}{{end}}
//
// options: optional parameters.
func ({{.ReceiverName}} *{{.TypeName}}) {{.Name}}({{range .RequiredURLParts}}{{.Name}} {{.Type}}, {{end}}{{range .RequiredURLParams}}{{.Name}} {{.Type}}, {{end}}options ...{{.Name}}Option) (*{{.Name}}Response, error) {
	req := {{.ReceiverName}}.transport.NewRequest("{{.HTTPMethod}}")
	for _, option := range options{
		option(req)
	}
	resp, err := {{.ReceiverName}}.transport.Do(req)
	return &{{.Name}}Response{resp}, err
}

// {{.Name}}Response is the response for {{.Name}}.
type {{.Name}}Response struct {
	Response *http.Response
	// TODO: fill in structured response
}

// DecodeBody decodes the JSON body of the HTTP response.
func (r *{{.Name}}Response) DecodeBody() (util.MapStr, error) {
	return transport.DecodeResponseBody(r.Response)
}
