/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package api

import (
	"bytes"
	"testing"
	"text/template"

	"github.com/elastic/go-elasticsearch/generator/common"
)

func TestGenerateAPI(t *testing.T) {
	m := newIndexMethod(t)
	templates, err := template.ParseFiles("templates/package.tmpl")
	if err != nil {
		t.Fatal(err)
	}
	p := NewPackage(m, templates)
	if err != nil {
		t.Fatal(err)
	}
	var writer bytes.Buffer
	err = p.generateAPI(&writer)
	if err != nil {
		t.Fatal(err)
	}
	expectedCode := `// Package api is the root API package.
package api

// generated by github.com/elastic/go-elasticsearch/cmd/generator; DO NOT EDIT

import (
	"github.com/elastic/go-elasticsearch/transport"
)

// API is the root API client.
type API struct {
	// transport is the transport client.
	transport *transport.Transport
}

// New is the constructor for API. Note that this is automatically invoked by the client.Client type.
func New(transport *transport.Transport) *API {
	return &API{

		transport: transport,
	}
}
`
	if d := common.Diff(t, expectedCode, writer.String()); len(d) > 0 {
		t.Fail()
	}
}
