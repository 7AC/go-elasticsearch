// generated by github.com/elastic/go-elasticsearch/cmd/generator; DO NOT EDIT

package snapshot

import (
	"time"

	"github.com/elastic/go-elasticsearch/transport"
)

// Option is a non-required API option that gets applied to an HTTP request.
type Option struct {
	name  string
	apply func(r *transport.Request)
}

// WithBody - details of what to restore.
func WithBody(body map[string]interface{}) Option {
	return Option{
		name: "WithBody",
		apply: func(r *transport.Request) {
		},
	}
}

// WithErrorTrace - include the stack trace of returned errors.
func WithErrorTrace(errorTrace bool) Option {
	return Option{
		name: "WithErrorTrace",
		apply: func(r *transport.Request) {
		},
	}
}

// WithFilterPath - a comma-separated list of filters used to reduce the respone.
func WithFilterPath(filterPath []string) Option {
	return Option{
		name: "WithFilterPath",
		apply: func(r *transport.Request) {
		},
	}
}

// WithHuman - return human readable values for statistics.
func WithHuman(human bool) Option {
	return Option{
		name: "WithHuman",
		apply: func(r *transport.Request) {
		},
	}
}

// WithIgnore - ignores the specified HTTP status codes.
func WithIgnore(ignore []int) Option {
	return Option{
		name: "WithIgnore",
		apply: func(r *transport.Request) {
			for _, status := range ignore {
				r.IgnoredStatuses[status] = struct{}{}
			}
		},
	}
}

// WithIgnoreUnavailable - whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown.
func WithIgnoreUnavailable(ignoreUnavailable bool) Option {
	return Option{
		name: "WithIgnoreUnavailable",
		apply: func(r *transport.Request) {
		},
	}
}

// WithLocal - return local information, do not retrieve the state from master node (default: false).
func WithLocal(local bool) Option {
	return Option{
		name: "WithLocal",
		apply: func(r *transport.Request) {
		},
	}
}

// WithMasterTimeout - explicit operation timeout for connection to master node.
func WithMasterTimeout(masterTimeout time.Duration) Option {
	return Option{
		name: "WithMasterTimeout",
		apply: func(r *transport.Request) {
		},
	}
}

// WithPretty - pretty format the returned JSON response.
func WithPretty(pretty bool) Option {
	return Option{
		name: "WithPretty",
		apply: func(r *transport.Request) {
		},
	}
}

// WithRepository - a repository name.
func WithRepository(repository string) Option {
	return Option{
		name: "WithRepository",
		apply: func(r *transport.Request) {
		},
	}
}

// WithRepositoryList - a comma-separated list of repository names.
func WithRepositoryList(repositoryList []string) Option {
	return Option{
		name: "WithRepositoryList",
		apply: func(r *transport.Request) {
		},
	}
}

// WithSnapshot - a comma-separated list of snapshot names.
func WithSnapshot(snapshot []string) Option {
	return Option{
		name: "WithSnapshot",
		apply: func(r *transport.Request) {
		},
	}
}

// WithSourceParam - the URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
func WithSourceParam(sourceParam string) Option {
	return Option{
		name: "WithSourceParam",
		apply: func(r *transport.Request) {
		},
	}
}

// WithTimeout - explicit operation timeout.
func WithTimeout(timeout time.Duration) Option {
	return Option{
		name: "WithTimeout",
		apply: func(r *transport.Request) {
		},
	}
}

// WithVerify - whether to verify the repository after creation.
func WithVerify(verify bool) Option {
	return Option{
		name: "WithVerify",
		apply: func(r *transport.Request) {
		},
	}
}

// WithWaitForCompletion - should this request wait until the operation has completed before returning.
func WithWaitForCompletion(waitForCompletion bool) Option {
	return Option{
		name: "WithWaitForCompletion",
		apply: func(r *transport.Request) {
		},
	}
}

var (
	supportedOptions = map[string]map[string]struct{}{
		"DeleteRepository": map[string]struct{}{
			"WithMasterTimeout": struct{}{},
			"WithTimeout":       struct{}{},
			"WithErrorTrace":    struct{}{},
			"WithFilterPath":    struct{}{},
			"WithHuman":         struct{}{},
			"WithIgnore":        struct{}{},
			"WithPretty":        struct{}{},
			"WithSourceParam":   struct{}{},
		},
		"Create": map[string]struct{}{
			"WithMasterTimeout":     struct{}{},
			"WithWaitForCompletion": struct{}{},
			"WithBody":              struct{}{},
			"WithErrorTrace":        struct{}{},
			"WithFilterPath":        struct{}{},
			"WithHuman":             struct{}{},
			"WithIgnore":            struct{}{},
			"WithPretty":            struct{}{},
			"WithSourceParam":       struct{}{},
		},
		"CreateRepository": map[string]struct{}{
			"WithMasterTimeout": struct{}{},
			"WithTimeout":       struct{}{},
			"WithVerify":        struct{}{},
			"WithErrorTrace":    struct{}{},
			"WithFilterPath":    struct{}{},
			"WithHuman":         struct{}{},
			"WithIgnore":        struct{}{},
			"WithPretty":        struct{}{},
			"WithSourceParam":   struct{}{},
		},
		"Status": map[string]struct{}{
			"WithRepository":        struct{}{},
			"WithSnapshot":          struct{}{},
			"WithIgnoreUnavailable": struct{}{},
			"WithMasterTimeout":     struct{}{},
			"WithErrorTrace":        struct{}{},
			"WithFilterPath":        struct{}{},
			"WithHuman":             struct{}{},
			"WithIgnore":            struct{}{},
			"WithPretty":            struct{}{},
			"WithSourceParam":       struct{}{},
		},
		"Get": map[string]struct{}{
			"WithIgnoreUnavailable": struct{}{},
			"WithMasterTimeout":     struct{}{},
			"WithErrorTrace":        struct{}{},
			"WithFilterPath":        struct{}{},
			"WithHuman":             struct{}{},
			"WithIgnore":            struct{}{},
			"WithPretty":            struct{}{},
			"WithSourceParam":       struct{}{},
		},
		"VerifyRepository": map[string]struct{}{
			"WithMasterTimeout": struct{}{},
			"WithTimeout":       struct{}{},
			"WithErrorTrace":    struct{}{},
			"WithFilterPath":    struct{}{},
			"WithHuman":         struct{}{},
			"WithIgnore":        struct{}{},
			"WithPretty":        struct{}{},
			"WithSourceParam":   struct{}{},
		},
		"Restore": map[string]struct{}{
			"WithMasterTimeout":     struct{}{},
			"WithWaitForCompletion": struct{}{},
			"WithBody":              struct{}{},
			"WithErrorTrace":        struct{}{},
			"WithFilterPath":        struct{}{},
			"WithHuman":             struct{}{},
			"WithIgnore":            struct{}{},
			"WithPretty":            struct{}{},
			"WithSourceParam":       struct{}{},
		},
		"GetRepository": map[string]struct{}{
			"WithRepositoryList": struct{}{},
			"WithLocal":          struct{}{},
			"WithMasterTimeout":  struct{}{},
			"WithErrorTrace":     struct{}{},
			"WithFilterPath":     struct{}{},
			"WithHuman":          struct{}{},
			"WithIgnore":         struct{}{},
			"WithPretty":         struct{}{},
			"WithSourceParam":    struct{}{},
		},
		"Delete": map[string]struct{}{
			"WithMasterTimeout": struct{}{},
			"WithErrorTrace":    struct{}{},
			"WithFilterPath":    struct{}{},
			"WithHuman":         struct{}{},
			"WithIgnore":        struct{}{},
			"WithPretty":        struct{}{},
			"WithSourceParam":   struct{}{},
		},
	}
)
